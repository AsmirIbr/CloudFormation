AWSTemplateFormatVersion: "2010-09-09"
Description: Security groups for nodeJS

Parameters:

  Prefix: 
    Type: String

  Environment:
    Type: String
    
Resources:

  nodejsGetMethodModel:
    Type: AWS::ApiGateway::Model
    Properties: 
      ContentType: application/json
      Name: ResponseModel
      RestApiId: !Ref nodejsApigateway
      Schema: 
        $schema: http://json-schema.org/draft-04/schema#
        title: Empty Schema
        type: object

  nodejsPostMethodModel:
    Type: AWS::ApiGateway::Model
    Properties: 
      ContentType: application/json
      Name: Users
      RestApiId: !Ref nodejsApigateway
      Schema: 
        required:
        - email
        - lastCode
        - name
        - phone
        type: object
        properties:
          id:
            type: integer
            format: int64
          lastCode:
            type: string
          name:
            type: string
          email:
            type: string
          phone:
            type: string
  
  nodejsErrorModel:
    Type: AWS::ApiGateway::Model
    Properties: 
      ContentType: application/json
      Name: ErrorModel
      RestApiId: !Ref nodejsApigateway
      Schema: 
        $schema: http://json-schema.org/draft-04/schema#
        title: Error Schema
        type: object
        properties:
          message:
            type: string

  nodejsApigateway:
    Type: "AWS::ApiGateway::RestApi"
    Properties:
      ApiKeySourceType: HEADER
      EndpointConfiguration:
        Types:
          - REGIONAL
      Name: !Sub ${Prefix}-${Environment}-apigateway

  nodejsApigatewayResource:
    Type: "AWS::ApiGateway::Resource"
    Properties:
      ParentId: !GetAtt nodejsApigateway.RootResourceId #required
      PathPart: lottery #required
      RestApiId: !Ref nodejsApigateway #required

  nodejsApigatewayMethodGet:
    Type: "AWS::ApiGateway::Method"
    Properties:
      AuthorizationType: NONE
      HttpMethod: GET #required
      Integration:
        IntegrationResponses: 
          - StatusCode: "200"
            ResponseTemplates: {"application/json": ""}
        IntegrationHttpMethod: GET
        Type: HTTP
        Uri: "http://nodejsApplicationLoadbalancer-472309917.eu-west-2.elb.amazonaws.com/lottery"
      MethodResponses:
        - StatusCode: "200"
          ResponseModels: 
            application/json: !Ref nodejsGetMethodModel
      ResourceId: !Ref nodejsApigatewayResource #required
      RestApiId: !Ref nodejsApigateway #required

  nodejsApigatewayMethodPost:
    Type: "AWS::ApiGateway::Method"
    Properties:
      AuthorizationType: NONE
      HttpMethod: POST #required
      Integration:
        IntegrationResponses: 
          - StatusCode: "200"
            ResponseTemplates: {"application/json": ""}
        IntegrationHttpMethod: POST
        Type: HTTP
        Uri: "http://nodejsApplicationLoadbalancer-472309917.eu-west-2.elb.amazonaws.com/lottery"
      MethodResponses:
        - StatusCode: "200"
          ResponseModels: 
            application/json: !Ref nodejsGetMethodModel
      ResourceId: !Ref nodejsApigatewayResource #required
      RestApiId: !Ref nodejsApigateway #required

  nodejsApigatewayResourceGetById:
    Type: "AWS::ApiGateway::Resource"
    Properties:
      ParentId: !Ref nodejsApigatewayResource #required
      PathPart: "{id}" #required
      RestApiId: !Ref nodejsApigateway #required

  nodejsApigatewayMethodGetbyID:
    Type: "AWS::ApiGateway::Method"
    Properties:
      AuthorizationType: NONE
      HttpMethod: GET #required
      RequestParameters: 
        method.request.path.id: true
      Integration:
        IntegrationResponses: 
          - StatusCode: "200"
          - StatusCode: "404"
            SelectionPattern: "404"
            ResponseTemplates: {"application/json": "Glup si!"}
        IntegrationHttpMethod: GET
        Type: HTTP
        Uri: "http://nodejsApplicationLoadbalancer-472309917.eu-west-2.elb.amazonaws.com/lottery/{id}"
        RequestParameters: 
          'integration.request.path.id': 'method.request.path.id'
      MethodResponses:
        - StatusCode: "200"
          ResponseModels: 
            application/json: !Ref nodejsGetMethodModel
        - StatusCode: "404"
          ResponseModels: 
            application/json: !Ref nodejsErrorModel
      ResourceId: !Ref nodejsApigatewayResourceGetById #required
      RestApiId: !Ref nodejsApigateway #required

  # nodejsApigatewayMethodPutbyID:
  #   Type: "AWS::ApiGateway::Method"
  #   Properties:
  #     AuthorizationType: NONE
  #     HttpMethod: PUT #required
  #     Integration:
  #       IntegrationResponses: 
  #         - StatusCode: "200"
  #         - StatusCode: "404"
  #           SelectionPattern: "404"
  #           ResponseTemplates: {"application/json": "Glup si"}
  #       IntegrationHttpMethod: PUT
  #       Type: HTTP
  #       Uri: "http://nodejsApplicationLoadbalancer-472309917.eu-west-2.elb.amazonaws.com/lottery/{id}"
  #     MethodResponses:
  #       - StatusCode: "200"
  #         ResponseModels: 
  #           application/json: !Ref nodejsGetMethodModel
  #       - StatusCode: "404"
  #         ResponseModels: 
  #           application/json: !Ref nodejsErrorModel
  #     ResourceId: !Ref nodejsApigatewayResourceGetById #required
  #     RestApiId: !Ref nodejsApigateway #required

  LogicalID:
    Type: "AWS::Lambda::Function"
    Properties:
      Code: #required
        ZipFile: !Sub |
          const AWS = require('aws-sdk');
          var apigateway = new AWS.APIGateway({apiVersion: '2015/07/09'});
          AWS.config.region = 'eu-west-2';

          exports.handler = async (event) => {

              var params = {
              restApiId: '${nodejsApigateway}', 
              stageName: '${Environment}'
              };

              apigateway.createDeployment(params, function(err, data) {
              if (err) console.log(err, err.stack); 
              else     console.log(data);           
              });

              const response = {
                  statusCode: 200,
                  body: JSON.stringify("Success"),
              };
              return response;
          };
      Handler: index.handler #required
      Role: arn:aws:iam::743584032881:role/service-role/first-lambda-role-7zaec60s #required
      Runtime: nodejs8.10 #required
  
  # nodejsApiGatewayDeployment:
  #   Type: "AWS::ApiGateway::Deployment"
  #   Properties:
  #     RestApiId: !Ref nodejsApigateway #required
  #     StageName: prod