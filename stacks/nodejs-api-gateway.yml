AWSTemplateFormatVersion: "2010-09-09"
Description: Security groups for nodeJS

Parameters:

  Prefix: 
    Type: String

  Environment:
    Type: String
    
Resources:

  nodejsGetMethodModel:
    Type: AWS::ApiGateway::Model
    Properties: 
      ContentType: application/json
      Name: ResponseModel
      RestApiId: !Ref nodejsApigateway
      Schema: 
        $schema: http://json-schema.org/draft-04/schema#
        title: Empty Schema
        type: object

  nodejsPostMethodModel:
    Type: AWS::ApiGateway::Model
    Properties: 
      ContentType: application/json
      Name: Users
      RestApiId: !Ref nodejsApigateway
      Schema: 
        required:
        - email
        - lastCode
        - name
        - phone
        type: object
        properties:
          id:
            type: integer
            format: int64
          lastCode:
            type: string
          name:
            type: string
          email:
            type: string
          phone:
            type: string
  
  nodejsErrorModel:
    Type: AWS::ApiGateway::Model
    Properties: 
      ContentType: application/json
      Name: ErrorModel
      RestApiId: !Ref nodejsApigateway
      Schema: 
        $schema: http://json-schema.org/draft-04/schema#
        title: Error Schema
        type: object
        properties:
          message:
            type: string

  nodejsApigateway:
    Type: "AWS::ApiGateway::RestApi"
    Properties:
      ApiKeySourceType: HEADER
      EndpointConfiguration:
        Types:
          - REGIONAL
      Name: !Sub ${Prefix}-${Environment}-apigateway

  nodejsApigatewayResource:
    Type: "AWS::ApiGateway::Resource"
    Properties:
      ParentId: !GetAtt nodejsApigateway.RootResourceId #required
      PathPart: lottery #required
      RestApiId: !Ref nodejsApigateway #required

  nodejsApigatewayMethodGet:
    Type: "AWS::ApiGateway::Method"
    Properties:
      ApiKeyRequired: true
      AuthorizationType: NONE
      HttpMethod: GET #required
      Integration:
        IntegrationResponses: 
          - StatusCode: "200"
            ResponseTemplates: {"application/json": ""}
        IntegrationHttpMethod: GET
        Type: HTTP
        Uri: "http://nodejsApplicationLoadbalancer-472309917.eu-west-2.elb.amazonaws.com/lottery"
      MethodResponses:
        - StatusCode: "200"
          ResponseModels: 
            application/json: !Ref nodejsGetMethodModel
      ResourceId: !Ref nodejsApigatewayResource #required
      RestApiId: !Ref nodejsApigateway #required

  nodejsApigatewayMethodPost:
    Type: "AWS::ApiGateway::Method"
    Properties:
      AuthorizationType: NONE
      HttpMethod: POST #required
      Integration:
        IntegrationResponses: 
          - StatusCode: "200"
            ResponseTemplates: {"application/json": ""}
        IntegrationHttpMethod: POST
        Type: HTTP
        Uri: "http://nodejsApplicationLoadbalancer-472309917.eu-west-2.elb.amazonaws.com/lottery"
      MethodResponses:
        - StatusCode: "200"
          ResponseModels: 
            application/json: !Ref nodejsGetMethodModel
      ResourceId: !Ref nodejsApigatewayResource #required
      RestApiId: !Ref nodejsApigateway #required

  nodejsApigatewayResourceGetById:
    Type: "AWS::ApiGateway::Resource"
    Properties:
      ParentId: !Ref nodejsApigatewayResource #required
      PathPart: "{id}" #required
      RestApiId: !Ref nodejsApigateway #required

  nodejsApigatewayMethodGetbyID:
    Type: "AWS::ApiGateway::Method"
    Properties:
      AuthorizationType: NONE
      HttpMethod: GET #required
      RequestParameters: 
        method.request.path.id: true
      Integration:
        IntegrationResponses: 
          - StatusCode: "200"
          - StatusCode: "404"
            SelectionPattern: "404"
            ResponseTemplates: {"application/json": "Glup si!"}
        IntegrationHttpMethod: GET
        Type: HTTP
        Uri: "http://nodejsApplicationLoadbalancer-472309917.eu-west-2.elb.amazonaws.com/lottery/{id}"
        RequestParameters: 
          'integration.request.path.id': 'method.request.path.id'
      MethodResponses:
        - StatusCode: "200"
          ResponseModels: 
            application/json: !Ref nodejsGetMethodModel
        - StatusCode: "404"
          ResponseModels: 
            application/json: !Ref nodejsErrorModel
      ResourceId: !Ref nodejsApigatewayResourceGetById #required
      RestApiId: !Ref nodejsApigateway #required

  nodejsApigatewayMethodPutbyID:
    Type: "AWS::ApiGateway::Method"
    Properties:
      AuthorizationType: NONE
      HttpMethod: PUT #required
      Integration:
        IntegrationResponses: 
          - StatusCode: "200"
          - StatusCode: "404"
            SelectionPattern: "404"
            ResponseTemplates: {"application/json": "Glup si"}
        IntegrationHttpMethod: PUT
        Type: HTTP
        Uri: "http://nodejsApplicationLoadbalancer-472309917.eu-west-2.elb.amazonaws.com/lottery/{id}"
      MethodResponses:
        - StatusCode: "200"
          ResponseModels: 
            application/json: !Ref nodejsGetMethodModel
        - StatusCode: "404"
          ResponseModels: 
            application/json: !Ref nodejsErrorModel
      ResourceId: !Ref nodejsApigatewayResourceGetById #required
      RestApiId: !Ref nodejsApigateway #required

  deployApiFunction:
    Type: "AWS::Lambda::Function"
    Properties:
      Code: #required
        ZipFile: !Sub |
          const AWS = require('aws-sdk');
          var apigateway = new AWS.APIGateway({apiVersion: '2015/07/09'});
          var codepipeline = new AWS.CodePipeline()
          AWS.config.region = 'eu-west-2';

          exports.handler = function (event, context, callback){

              const done = (err, data) => callback(null, {
                statusCode: err ? 500 : 200,
                body: err ? JSON.stringify({
                  'statusCode': 500,
                  'message': err.message
                }) : JSON.stringify(event)
              })
              
              var params = {
                restApiId: '${nodejsApigateway}', 
                stageName: '${Environment}'
              };
              
              apigateway.createDeployment(params, done);

              const jobId = event["CodePipeline.job"].id
              try {
                const params = {
                  jobId
                }
                codepipeline.putJobSuccessResult(params).promise()
              }
              catch (err) {
                const params = {
                  jobId,
                  failureDetails: {
                    message: err.toString(),
                    type: 'JobFailed',
                    externalExecutionId: context.invokeid
                  }
                }
                codepipeline.putJobFailureResult(params).promise()
              }
            };

      Handler: index.handler #required
      Role: arn:aws:iam::743584032881:role/service-role/first-lambda-role-7zaec60s #required
      Runtime: nodejs8.10 #required

  JWT:
    Type: "AWS::Lambda::Function"
    Properties:
      Code: #required
        ZipFile: !Sub |
          exports.handler =  function(event, context, callback) {
          var token = event.authorizationToken;
          switch (token) {
              case 'allow':
                  callback(null, generatePolicy('user', 'Allow', event.methodArn));
                  break;
              case 'deny':
                  callback(null, generatePolicy('user', 'Deny', event.methodArn));
                  break;
              case 'unauthorized':
                  callback("Unauthorized");   // Return a 401 Unauthorized response
                  break;
              default:
                  callback("Error: Invalid token"); // Return a 500 Invalid token response
            }
          };

          // Help function to generate an IAM policy
          var generatePolicy = function(principalId, effect, resource) {
              var authResponse = {};
              
              authResponse.principalId = principalId;
              if (effect && resource) {
                  var policyDocument = {};
                  policyDocument.Version = '2012-10-17'; 
                  policyDocument.Statement = [];
                  var statementOne = {};
                  statementOne.Action = 'execute-api:Invoke'; 
                  statementOne.Effect = effect;
                  statementOne.Resource = resource;
                  policyDocument.Statement[0] = statementOne;
                  authResponse.policyDocument = policyDocument;
              }
              
              // Optional output with custom properties of the String, Number or Boolean type.
              authResponse.context = {
                  "stringKey": "stringval",
                  "numberKey": 123,
                  "booleanKey": true
              };
              return authResponse;
          }

      Handler: index.handler #required
      Role: arn:aws:iam::743584032881:role/service-role/first-lambda-role-7zaec60s #required
      Runtime: nodejs8.10 #required

  requestBasedAuthorizer:
    Type: "AWS::Lambda::Function"
    Properties:
      Code: #required
        ZipFile: !Sub |
          exports.handler = function(event, context, callback) {        
              console.log('Received event:', JSON.stringify(event, null, 2));

              // A simple request-based authorizer example to demonstrate how to use request 
              // parameters to allow or deny a request. In this example, a request is  
              // authorized if the client-supplied HeaderAuth1 header, QueryString1 
              // query parameter, and stage variable of StageVar1 all match
              // specified values of 'headerValue1', 'queryValue1', and 'stageValue1',
              // respectively.

              // Retrieve request parameters from the Lambda function input:
              var headers = event.headers;
              var queryStringParameters = event.queryStringParameters;
              var pathParameters = event.pathParameters;
              var stageVariables = event.stageVariables;
                  
              // Parse the input for the parameter values
              var tmp = event.methodArn.split(':');
              var apiGatewayArnTmp = tmp[5].split('/');
              var awsAccountId = tmp[4];
              var region = tmp[3];
              var restApiId = apiGatewayArnTmp[0];
              var stage = apiGatewayArnTmp[1];
              var method = apiGatewayArnTmp[2];
              var resource = '/'; // root resource
              if (apiGatewayArnTmp[3]) {
                  resource += apiGatewayArnTmp[3];
              }
                  
              // Perform authorization to return the Allow policy for correct parameters and 
              // the 'Unauthorized' error, otherwise.
              var authResponse = {};
              var condition = {};
              condition.IpAddress = {};
              
              if (headers.HeaderAuth1 === "headerValue1"
                  && queryStringParameters.QueryString1 === "queryValue1"
                  && stageVariables.StageVar1 === "stageValue1") {
                  callback(null, generateAllow('me', event.methodArn));
              }  else {
                  callback("Unauthorized");
              }
          }
              
          // Help function to generate an IAM policy
          var generatePolicy = function(principalId, effect, resource) {
              // Required output:
              var authResponse = {};
              authResponse.principalId = principalId;
              if (effect && resource) {
                  var policyDocument = {};
                  policyDocument.Version = '2012-10-17'; // default version
                  policyDocument.Statement = [];
                  var statementOne = {};
                  statementOne.Action = 'execute-api:Invoke'; // default action
                  statementOne.Effect = effect;
                  statementOne.Resource = resource;
                  policyDocument.Statement[0] = statementOne;
                  authResponse.policyDocument = policyDocument;
              }
              // Optional output with custom properties of the String, Number or Boolean type.
              authResponse.context = {
                  "stringKey": "stringval",
                  "numberKey": 123,
                  "booleanKey": true
              };
              return authResponse;
          }
              
          var generateAllow = function(principalId, resource) {
              return generatePolicy(principalId, 'Allow', resource);
          }
              
          var generateDeny = function(principalId, resource) {
              return generatePolicy(principalId, 'Deny', resource);
          }
      Handler: index.handler #required
      Role: arn:aws:iam::743584032881:role/service-role/first-lambda-role-7zaec60s #required
      Runtime: nodejs8.10 #required

  apiKey:
    Type: "AWS::ApiGateway::ApiKey"
    Properties:
      Enabled: true
      Name: key

  usagePlan:
    Type: "AWS::ApiGateway::UsagePlan"
    Properties:
      ApiStages:
        - ApiId: !Ref nodejsApigateway
          Stage: !Ref Environment
      UsagePlanName: !Sub ${Prefix}-${Environment}-plan

  usagePlanKey:
    Type: "AWS::ApiGateway::UsagePlanKey"
    Properties:
      KeyId: !Ref apiKey #required
      KeyType: API_KEY #required
      UsagePlanId: !Ref usagePlan #required
  
  
  
  # nodejsApiGatewayDeployment:
  #   Type: "AWS::ApiGateway::Deployment"
  #   Properties:
  #     RestApiId: !Ref nodejsApigateway #required
  #     StageName: prod
Outputs:

  lambdaFunction:
    Value: !Ref deployApiFunction
    Export:
      Name: !Sub ${Prefix}-${Environment}-LogicalID